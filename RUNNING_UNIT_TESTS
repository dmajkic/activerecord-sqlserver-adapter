
= Creating the test databases

The default names for the test databases are "activerecord_unittest" and 
"activerecord_unittest2". If you want to use another database name then be sure 
to update the connection file that matches your connection method in 
test/connections/native_sqlserver_<connection_method>/connection.rb. Define a 
user named 'rails' in SQL Server with all privileges granted for the test 
databases. Use an empty password for said user.

The connection files make certain assumptions. For instance, the ODBC 
connection assumes you have a DSN setup that matches the name of the default 
database names. Remember too you have to set an environment variable for the 
DSN of the adapter, see the connection.rb file that matches your connection 
mode for details.


= Cloning The Repos

Clone adapter git://github.com/rails-sqlserver/activerecord-sqlserver-adapter.git. 
The master branch is the one under development for rails 3, track the repos 2-3-stable 
branch for 2.x development.

The tests of this adapter depend on the existence of the rails and/or arel source 
which can be cloned at git://github.com/rails/rails.git and git://github.com/rails/arel.git

Once you have cloned these repos set the RAILS_SOURCE and AREL environment variables
to their full path. For instance:

  ∴ echo $RAILS_SOURCE
  /Users/kencollins/Repositories/rails
  
  ∴ echo $AREL
  /Users/kencollins/Repositories/arel

Do not forget to checkout the version tags of each repo that match either our gemspec 
or what version your tests target. For instance, v3.0.3 tag for ActiveRecord and 
v2.0.7 for ARel. 


= Setup Connection Mode

The Gemfile contains groups for :tinytds and :odbc. By default it will install both gems 
which allows you to run the full test suite in either connection mode. If for some reason 
any one of these is problematic or of no concern, you could always for go the bundling 
of those gems with something like this.

  ∴ bundle install --without odbc


= Finally

Now with all that out of the way you can run "bundle install" to hook everything up. 
Our tests use bundler to setup the load paths correctly. If all goes well, you should 
be able to run "rake test:dblib" which will load all the adapter tests followed by the 
core ActiveRecord tests. Lastly, it is typically good practice to do your work 
on a local branch of our remote tracking branch.


= Current Expected Failures

* test_count_explicit_columns(RelationTest) <0> expected but was <7>
  I believe this failure is actually incorrect for other DBs to be passing and 
  will explore a patch to rails which disables ambiguous results sets.

* Misc Date/Time object instance matches when using ODBC mode.


